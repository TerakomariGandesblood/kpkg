From 19c543d811359d6d35ad358ca2b9eb717bc85949 Mon Sep 17 00:00:00 2001
From: Kaiser <kaiserlancelot123@gmail.com>
Date: Thu, 7 Apr 2022 12:34:42 +0800
Subject: [PATCH] Build ngtcp2 with BoringSSL

---
 lib/vquic/ngtcp2.c | 52 +++++++++++++++++++++++++---------------------
 1 file changed, 28 insertions(+), 24 deletions(-)

diff --git a/lib/vquic/ngtcp2.c b/lib/vquic/ngtcp2.c
index aac092b..d333aa8 100644
--- a/lib/vquic/ngtcp2.c
+++ b/lib/vquic/ngtcp2.c
@@ -28,7 +28,7 @@
 #include <nghttp3/nghttp3.h>
 #ifdef USE_OPENSSL
 #include <openssl/err.h>
-#include <ngtcp2/ngtcp2_crypto_openssl.h>
+#include <ngtcp2/ngtcp2_crypto_boringssl.h>
 #include "vtls/openssl.h"
 #elif defined(USE_GNUTLS)
 #include <ngtcp2/ngtcp2_crypto_gnutls.h>
@@ -206,21 +206,16 @@ static int write_client_handshake(struct quicsocket *qs,
 }
 
 #ifdef USE_OPENSSL
-static int quic_set_encryption_secrets(SSL *ssl,
-                                       OSSL_ENCRYPTION_LEVEL ossl_level,
-                                       const uint8_t *rx_secret,
-                                       const uint8_t *tx_secret,
-                                       size_t secretlen)
+static int quic_set_read_secret(SSL *ssl, enum ssl_encryption_level_t ssl_level,
+                                const SSL_CIPHER *cipher, const uint8_t *secret,
+                                size_t secret_len)
 {
   struct quicsocket *qs = (struct quicsocket *)SSL_get_app_data(ssl);
-  int level = ngtcp2_crypto_openssl_from_ossl_encryption_level(ossl_level);
+  int level = ngtcp2_crypto_boringssl_from_ssl_encryption_level(ssl_level);
+  (void)cipher;
 
   if(ngtcp2_crypto_derive_and_install_rx_key(
-       qs->qconn, NULL, NULL, NULL, level, rx_secret, secretlen) != 0)
-    return 0;
-
-  if(ngtcp2_crypto_derive_and_install_tx_key(
-       qs->qconn, NULL, NULL, NULL, level, tx_secret, secretlen) != 0)
+       qs->qconn, NULL, NULL, NULL, level, secret, secret_len) != 0)
     return 0;
 
   if(level == NGTCP2_CRYPTO_LEVEL_APPLICATION) {
@@ -231,12 +226,26 @@ static int quic_set_encryption_secrets(SSL *ssl,
   return 1;
 }
 
-static int quic_add_handshake_data(SSL *ssl, OSSL_ENCRYPTION_LEVEL ossl_level,
+static int quic_set_write_secret(SSL *ssl, enum ssl_encryption_level_t ssl_level,
+                                 const SSL_CIPHER *cipher, const uint8_t *secret,
+                                 size_t secret_len){
+  struct quicsocket *qs = (struct quicsocket *)SSL_get_app_data(ssl);
+  int level = ngtcp2_crypto_boringssl_from_ssl_encryption_level(ssl_level);
+  (void)cipher;
+
+  if(ngtcp2_crypto_derive_and_install_tx_key(
+          qs->qconn, NULL, NULL, NULL, level, secret, secret_len) != 0)
+    return 0;
+
+  return 1;
+}
+
+static int quic_add_handshake_data(SSL *ssl, enum ssl_encryption_level_t ssl_level,
                                    const uint8_t *data, size_t len)
 {
   struct quicsocket *qs = (struct quicsocket *)SSL_get_app_data(ssl);
   ngtcp2_crypto_level level =
-      ngtcp2_crypto_openssl_from_ossl_encryption_level(ossl_level);
+      ngtcp2_crypto_boringssl_from_ssl_encryption_level(ssl_level);
 
   return write_client_handshake(qs, level, data, len);
 }
@@ -257,7 +266,8 @@ static int quic_send_alert(SSL *ssl, enum ssl_encryption_level_t level,
   return 1;
 }
 
-static SSL_QUIC_METHOD quic_method = {quic_set_encryption_secrets,
+static SSL_QUIC_METHOD quic_method = {quic_set_read_secret,
+                                      quic_set_write_secret,
                                       quic_add_handshake_data,
                                       quic_flush_flight, quic_send_alert};
 
@@ -270,14 +280,7 @@ static SSL_CTX *quic_ssl_ctx(struct Curl_easy *data)
 
   SSL_CTX_set_default_verify_paths(ssl_ctx);
 
-  if(SSL_CTX_set_ciphersuites(ssl_ctx, QUIC_CIPHERS) != 1) {
-    char error_buffer[256];
-    ERR_error_string_n(ERR_get_error(), error_buffer, sizeof(error_buffer));
-    failf(data, "SSL_CTX_set_ciphersuites: %s", error_buffer);
-    return NULL;
-  }
-
-  if(SSL_CTX_set1_groups_list(ssl_ctx, QUIC_GROUPS) != 1) {
+  if(SSL_CTX_set1_curves_list(ssl_ctx, QUIC_GROUPS) != 1) {
     failf(data, "SSL_CTX_set1_groups_list failed");
     return NULL;
   }
@@ -744,7 +747,8 @@ static ngtcp2_callbacks ng_callbacks = {
   NULL, /* ack_datagram */
   NULL, /* lost_datagram */
   ngtcp2_crypto_get_path_challenge_data_cb,
-  cb_stream_stop_sending
+  cb_stream_stop_sending,
+  NULL /* version_negotiation */
 };
 
 /*
-- 
2.32.0

